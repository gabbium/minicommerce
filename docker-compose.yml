services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  identity.web:
    build:
      context: .
      dockerfile: identity/src/MiniCommerce.Identity.Web/Dockerfile
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      CONNECTIONSTRINGS__DEFAULTCONNECTION: ${IDENTITY_CONNECTIONSTRINGS_DEFAULTCONNECTION}
      JWT__SECRET: ${IDENTITY_JWT_SECRET}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsS http://localhost:8080/api/health >/dev/null || exit 1",
        ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  portainer:
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    ports:
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

volumes:
  postgres_data:
  portainer_data: {}
